/****************************************************************************
* Copyright (C) 2019 Eric Mor
*
* This file is part of Spore ModCreatorKit.
*
* Spore ModAPI is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
****************************************************************************/
#pragma once

#include <Spore\Detouring.h>
#include <Spore\Resource\cResourceManager.h>

using namespace Resource;

/* Class generated by the ModAPI. You must NOT:
/*    - Create new instances of this class.
/*    - Make another class inherit this class.
/*    - Add new members to this class. You can add methods, however.
/* --------------------------------------------------------------- */
class DetouredResourceManager : public Resource::cResourceManager
{
public:

	// Call this static method in the DllMain function to apply the function detourings of this class.
	static long AttachDetour();

	// virtual bool Resource::IResourceManager::GetResource(const ResourceKey& name, ResourceObject** ppDst, int arg_8, DBPF* pDBPF, IResourceFactory* pFactory, const ResourceKey* pCacheName)
#pragma DisableOptimization
	static bool __fastcall DetouredGetResource_redirected( Resource::IResourceManager* _This, int, const ResourceKey& name, ResourceObject** ppDst, int arg_8, DBPF* pDBPF, IResourceFactory* pFactory, const ResourceKey* pCacheName)
	{
		return (( DetouredResourceManager*)_This)->DetouredGetResource(name, ppDst, arg_8, pDBPF, pFactory, pCacheName);
	}
	typedef bool (__thiscall* GetResource_original_t)( Resource::IResourceManager*, const ResourceKey& name, ResourceObject** ppDst, int arg_8, DBPF* pDBPF, IResourceFactory* pFactory, const ResourceKey* pCacheName);
	static GetResource_original_t GetResource_original;
	bool DetouredGetResource(const ResourceKey& name, ResourceObject** ppDst, int arg_8, DBPF* pDBPF, IResourceFactory* pFactory, const ResourceKey* pCacheName) ;


};
